{"map":"{\"version\":3,\"sources\":[\"/home/marlon/Documents/ReactTest/client/src/App.js\",\"/home/marlon/Documents/ReactTest/client/src/serviceWorker.js\",\"/home/marlon/Documents/ReactTest/client/src/index.js\"],\"names\":[\"App\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"handleChange\",\"event\",\"test\",\"target\",\"value\",\"setState\",\"userName\",\"handleSubmit\",\"preventDefault\",\"user\",\"name\",\"state\",\"axios\",\"post\",\"then\",\"response\",\"message\",\"data\",\"react_default\",\"a\",\"createElement\",\"type\",\"onChange\",\"placeholder\",\"onClick\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\"],\"mappings\":\"2RA0DeA,cArDb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAOFI,aAAe,SAAAC,GACO,QAEHC,KAAKD,EAAME,OAAOC,QACjCX,EAAKY,SAAS,CAAEC,SAAUL,EAAME,OAAOC,SAZ7BX,EAedc,aAAe,SAAAN,GACbA,EAAMO,iBAEN,IAAMC,EAAO,CACXC,KAAMjB,EAAKkB,MAAML,UAGnBM,EAAAA,EAAMC,KAAK,SAAU,CAAEJ,KAAAA,IAAQK,KAAK,SAAAC,GAClCtB,EAAKY,SAAS,CACZW,QAASD,EAASE,UAtBtBxB,EAAKkB,MAAQ,CACXL,SAAU,GACVU,QAAS,IAJCvB,wEA8BZ,OACEyB,EAAAC,EAAAC,cAAA,MAAA,KACEF,EAAAC,EAAAC,cAAA,OAAA,KACEF,EAAAC,EAAAC,cAAA,QAAA,KAAA,QAEEF,EAAAC,EAAAC,cAAA,QAAA,CACEC,KAAK,OACLX,KAAK,WACLN,MAAOR,KAAKe,MAAML,SAClBgB,SAAU1B,KAAKI,aACfuB,YAAY,0BAGhBL,EAAAC,EAAAC,cAAA,SAAA,CAAQC,KAAK,SAASG,QAAS5B,KAAKW,cAApC,QAGAW,EAAAC,EAAAC,cAAA,KAAA,KAAKxB,KAAKe,MAAMK,kBA/CRS,EAAAA,WCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC\",\"sourcesContent\":[\"import React, { Component } from \\\"react\\\";\\nimport \\\"./App.css\\\";\\nimport axios from \\\"axios\\\";\\n\\nclass App extends Component {\\n  constructor() {\\n    super();\\n    this.state = {\\n      userName: \\\"\\\",\\n      message: \\\"\\\"\\n    };\\n  }\\n\\n  handleChange = event => {\\n    const onlyLetters = /[0-9]/;\\n\\n    if (!onlyLetters.test(event.target.value))\\n      this.setState({ userName: event.target.value });\\n  };\\n\\n  handleSubmit = event => {\\n    event.preventDefault();\\n\\n    const user = {\\n      name: this.state.userName\\n    };\\n\\n    axios.post(\\\"/react\\\", { user }).then(response => {\\n      this.setState({\\n        message: response.data\\n      });\\n    });\\n  };\\n\\n  render() {\\n    return (\\n      <div>\\n        <form>\\n          <label>\\n            Name:\\n            <input\\n              type=\\\"text\\\"\\n              name=\\\"userName\\\"\\n              value={this.state.userName}\\n              onChange={this.handleChange}\\n              placeholder=\\\"Write your name here\\\"\\n            />\\n          </label>\\n          <button type=\\\"submit\\\" onClick={this.handleSubmit}>\\n            Send\\n          </button>\\n          <h2>{this.state.message}</h2>\\n        </form>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from \\\"react\\\";\\nimport ReactDOM from \\\"react-dom\\\";\\nimport \\\"./index.css\\\";\\nimport App from \\\"./App\\\";\\nimport * as serviceWorker from \\\"./serviceWorker\\\";\\n\\nReactDOM.render(<App />, document.getElementById(\\\"root\\\"));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{16:function(e,t,n){e.exports=n(45)},22:function(e,t,n){},24:function(e,t,n){},45:function(e,t,n){\"use strict\";n.r(t);var a=n(1),r=n.n(a),o=n(9),s=n.n(o),i=(n(22),n(10)),l=n(11),u=n(14),c=n(12),m=n(15),h=(n(24),n(13)),d=n.n(h),f=function(e){function t(){var e;return Object(i.a)(this,t),(e=Object(u.a)(this,Object(c.a)(t).call(this))).handleChange=function(t){/[0-9]/.test(t.target.value)||e.setState({userName:t.target.value})},e.handleSubmit=function(t){t.preventDefault();var n={name:e.state.userName};d.a.post(\"/react\",{user:n}).then(function(t){e.setState({message:t.data})})},e.state={userName:\"\",message:\"\"},e}return Object(m.a)(t,e),Object(l.a)(t,[{key:\"render\",value:function(){return r.a.createElement(\"div\",null,r.a.createElement(\"form\",null,r.a.createElement(\"label\",null,\"Name:\",r.a.createElement(\"input\",{type:\"text\",name:\"userName\",value:this.state.userName,onChange:this.handleChange,placeholder:\"Write your name here\"})),r.a.createElement(\"button\",{type:\"submit\",onClick:this.handleSubmit},\"Send\"),r.a.createElement(\"h2\",null,this.state.message)))}}]),t}(a.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));s.a.render(r.a.createElement(f,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[16,2,1]]]);","extractedComments":[]}